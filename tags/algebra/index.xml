<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algebra on pramana's blog</title><link>https://pr4-kp.github.io/tags/algebra/</link><description>Recent content in Algebra on pramana's blog</description><generator>Hugo</generator><language>en-us</language><copyright>Â© Pramana</copyright><lastBuildDate>Tue, 23 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://pr4-kp.github.io/tags/algebra/index.xml" rel="self" type="application/rss+xml"/><item><title>Can a machine learn mathematical structure?</title><link>https://pr4-kp.github.io/posts/machine-learning-sl2z/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://pr4-kp.github.io/posts/machine-learning-sl2z/</guid><description>&lt;p&gt;When I think of machine learning, I tend to think about &lt;strong&gt;estimation&lt;/strong&gt;; a machine learning algorithm is a method of estimating a function given a (usually large) set of data. As a result, I&amp;rsquo;ve primarily seen machine learning used when the function we are trying to estimate is assumed to be continuous (or differentiable, smooth, etc.), because then you can use nice results from analysis to prove convergence. But algebraic structures like &lt;a href="https://en.wikipedia.org/wiki/Group_theory"&gt;&lt;strong&gt;groups&lt;/strong&gt;&lt;/a&gt; can be discrete objects, where there is no way to smoothly interpolate between two group elements. Moreover, groups adhere to very strict rules that dictate how they can be studied, which makes this continuous way of thinking hard to apply &amp;ndash; I mean, it&amp;rsquo;s hard to imagine that a machine learning model, just armed with data about groups, functions between them, and some backpropagation, could reach the &lt;a href="https://en.wikipedia.org/wiki/Isomorphism_theorems"&gt;isomorphism theorems&lt;/a&gt;. Despite this, the research I did last semester opened my mind more to using classical machine learning methods to get structure of discrete groups, given that we ask train the machine on the right questions.&lt;/p&gt;</description></item><item><title>Why homology is weaker than homotopy</title><link>https://pr4-kp.github.io/posts/same-homology-different-homotopy/</link><pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate><guid>https://pr4-kp.github.io/posts/same-homology-different-homotopy/</guid><description>&lt;p&gt;The main two flavors of invariants in an introductory algebraic topology class are the homology groups associated with a space and the homotopy groups (typically just the first homotopy group, $\pi_1$). The fundamental group is formed by looking at loops starting at a certain point. Similarly, the homotopy groups look at cycles, which can be thought of as loops that commute. Because of these similarities, I wondered about which one was &amp;ldquo;better&amp;rdquo; at differentiating topological spaces.&lt;/p&gt;</description></item><item><title>Understanding exact sequences</title><link>https://pr4-kp.github.io/posts/exact-sequence/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><guid>https://pr4-kp.github.io/posts/exact-sequence/</guid><description>&lt;p&gt;Let&amp;rsquo;s start with a motivating question I had from group theory: if $N \trianglelefteq G$ is a normal subgroup,
is it necessarily true that $G\cong G/N\times N$? Looking at non-abelian groups quickly shows that the answer is no (take the dihedral group $D_3=\langle r,t \mid r^3=t^2=1, rt=tr^{-1}\rangle$ and
the normal subgroup $\langle r\rangle\cong \mathbb{Z}/3$).&lt;/p&gt;
&lt;p&gt;I later learned about &lt;strong&gt;semidirect products&lt;/strong&gt; $\rtimes_\phi$, which generalize the direct product $\times$. But even this was
insufficient to describe group decompositions.&lt;/p&gt;</description></item></channel></rss>